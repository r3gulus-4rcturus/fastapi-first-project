import time
from fastapi import FastAPI, Response, status, HTTPException
from fastapi.params import Body
from pydantic import BaseModel
from typing import Optional
from random import randrange
import psycopg2
from psycopg2.extras import RealDictCursor  # agar saat melakukan sql operation, nama column ditampilkan

app = FastAPI()     # Instance API


# define schema data sebagai suatu Pydantic Model
# misalkan perlu title berupa string dan content berupa string
# jadi, user yg ingin melakukan post HARUS menepati schema/contract ini
# ie harus mengirimkan data dengan spesifikasi seperti ini
# nantinya, data yg dikirim user akan diterima sebagai CLASS dengan attribute
# berupa data2 yg dikirim user
class Post(BaseModel):
    title: str
    content: str
    published: bool = True  # default = True, jadi kalo user ga specify published, published akan bernilai true
    rating: Optional[int] = None # kalo default value mau None, pake Optional 


# Store all posts in here
my_posts = [{"title": "title of post 1", "content": "content of post 1", "id": 1}]

# 3 line ini dinamakan path operation/route:
@app.get("/")           # decorator yg membuat fungsi dibawah ini act like API, jadi siapapun yg mau dapet return value dari fungsi get_user, bisa hit endpoint ("/")     
async def get():   # function biasa, nama kalo bisa sedeskriptif mungkin
    return {"message": " to my api"}   # data yg akan dikirim/direturn ke user
                                        # fastapi akan mengconvert data tersebut menjadi json
                                        # itulah gacornya fastapi
# (ada keyword async (optional)) => biasanya untuk
# task yg butuh aynchronous, manggil API, talking to database

# untuk decorator: @<namaINstance>.<httpMethod>(<endpoint path>):
# instance yg dimaksud adalah app, dan http method bisa get, post, etc.
# endpoint path adalah path setelah domain name
# misalkan endpoint didapat dari address www.facebook.com/apalah, 
# berarti yg masuk ke argumen path nya adalah "/apalah"
# kalo path "/", berarti root 

# kalo misal ada dua path operation dg decorator yg sama
# yg akan dijalankan adalah yg pertama dari atas
# jadi yg ini gabakal dijalankan. Jadi urutan diperhatikan
@app.get("/")
async def get2():
    return {"data": "ganteng"}

@app.get("/posts")
async def get_posts():
    return {"data": my_posts}   # fastAPI akan otomatis mengconvert menjadi json

def find_post(id):
    for post in my_posts:
        if post['id'] == id:
            return post
        
def find_post_index(id):
    for i, post in enumerate(my_posts):
        if post['id'] == id:
            return i

@app.get("/posts/latest")
def get_latest_post():
    post = my_posts[-1] 
    return {"data": post}

# get individual post by ID (post, singular, not posts)
@app.get("/posts/{id}") 
def get_post(id: int, response: Response):  # langsung declare kalo id harus berupa int, jadi fastapi akan melakukan validasi otomatis (kita gaperlu try except)
    post = find_post(id)
    if not post:
        # kalo manual:
        # response.status_code = status.HTTP_404_NOT_FOUND  # jika post tidak ditemukan, set status code jadi 404 (not found)
        # return {"message": f'Post with id: {id} was not found'}
        # best practice:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND,
                            detail      = f'Post with id: {id} was not found')
    return {"data": post}

# kalo get_latest_post ditaro di bawah get_post, akan error
# karena fastapai akan mendeteksi kecocokan url /posts/latest
# dengan path get_post yaitu /posts/{id} TERLEBIH DAHULU, sehingga
# dia akan mengeksekusi yg get_post. Jadi, selalu perhatikan urutan.
# kalo bisa, path yg hard coded taro di atas semua, sebelum path yg ada argumennya
# @app.get("/posts/latest")
# def get_latest_post():
#     post = my_posts[-1] 
#     return {"data": post}

# POST METHOD
# cara extract data yg disend user:
# tambahkan parameter <namaParam>: <tipeParam, pake dict aja> = Body(...))
# Jadi, programan akan extract data dari Body(...) (yaitu data yg di post sm user)
# ke dictionary bernama payLoad

# TANPA SCHEMA (harus pake Body(...))
# @app.post("/createposts")
# def create_posts(payLoad: dict = Body(...)): 
#     print(f"title : {payLoad['title']}")
#     return {"new_post": f"title {payLoad['title']} payloadContent {payLoad['content']}"}

# DENGAN SCHEMA
# Jadi, program akan melakukan validasi otomatis terhadap
# data yg user kirim. Apakah variabel2 sudah sesuai schema?
# apakah tipe datanya sama, semua variabelnya ada, dsb.
# Kalo ga sesuai, maka API otomatis akan return erorr 
@app.post("/posts", status_code=status.HTTP_201_CREATED)    # anytime we create an entity, the status code must be 201
def create_posts(new_post: Post): 
    post_dict = new_post.dict()
    post_dict['id'] = randrange(0, 10000000)    # add id using random.randrange
    my_posts.append(post_dict)                  # store to global array   
    return {"data": post_dict}

@app.delete("/posts/{id}", status_code=status.HTTP_204_NO_CONTENT)    # anytime we create an entity, the status code must be 201
def delete_posts(id: int):
    # deleting a post
    # find the index in the array that has required ID
    index = find_post_index(id)

    if index == None:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND,
                            detail      = f'Post with id: {id} was not found')

    my_posts.pop(index)
    # return {"message" : "post was successfully deleted"}  # if we delete something, we dont want to send any data back, so this one would be redundant
    return Response(status_code =status.HTTP_204_NO_CONTENT)    # this is the best practices

@app.put("/posts/{id}")
def update_posts(new_post: Post, id: int):
    index = find_post_index(id)

    if index == None:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND,
                            detail      = f'Post with id: {id} was not found')
    # update posts on the global array
    post_dict = new_post.dict()
    post_dict['id'] = id    
    my_posts[index] = post_dict
    
    return {"data": post_dict}

# Convert pydantic Model ke dictionary
# new_post.dict()
